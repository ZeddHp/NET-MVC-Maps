@model IEnumerable<MVC_leaflet.DB.Place>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Code)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Type)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LocationCode)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LocationType)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.GeoAddress)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Long)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Lat)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DDE)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DDN)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Code)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Type)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LocationCode)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LocationType)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.GeoAddress)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Long)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Lat)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DDE)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DDN)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>

<script src="~/lib/leaflet/leaflet.js"></script>
<script src="~/lib/leaflet/leaflet.min.js"></script>
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/papaparse@5.3.0/papaparse.min.js"></script>

<div id="map" style="width: 100%; height: 400px;"></div>
<script>
    var map = L.map('map', {
        center: [56.946285, 24.105078], // EDIT latitude, longitude to re-center map
        zoom: 9,  // EDIT from 1 to 18 -- decrease to zoom out, increase to zoom in
        scrollWheelZoom: false,
        tap: false
    });

    /* Control panel to display map layers */
    var controlLayers = L.control.layers(null, null, {
        position: "topright",
        collapsed: false
    }).addTo(map);

    // display Carto basemap tiles with light features and labels
    var light = L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>, &copy; <a href="https://carto.com/attribution">CARTO</a>'
    }).addTo(map); // EDIT - insert or remove ".addTo(map)" before last semicolon to display by default
    controlLayers.addBaseLayer(light, 'Carto Light basemap');

    /* Stamen colored terrain basemap tiles with labels */
    var terrain = L.tileLayer('https://stamen-tiles.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png', {
        attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Data by <a href="http://openstreetmap.org">OpenStreetMap</a>, under <a href="http://www.openstreetmap.org/copyright">ODbL</a>.'
    }); // EDIT - insert or remove ".addTo(map)" before last semicolon to display by default
    controlLayers.addBaseLayer(terrain, 'Stamen Terrain basemap');

    // see more basemap options at https://leaflet-extras.github.io/leaflet-providers/preview/

    // Read markers data from data.csv
    $.get('./data.csv', function (csvString) {

        // Use PapaParse to convert string to array of objects
        var data = Papa.parse(csvString, { header: true, dynamicTyping: true }).data;

        // For each row in data, create a marker and add it to the map
        // For each row, columns `Latitude`, `Longitude`, and `Title` are required
        for (var i in data) {
            var row = data[i];

            var marker = L.marker([row.Latitude, row.Longitude], {
                opacity: 1
            }).bindPopup(row.Title);

            marker.addTo(map);
        }
    });

</script>